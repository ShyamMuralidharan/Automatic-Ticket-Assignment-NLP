{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "XOGDnlzvIINi"
   },
   "source": [
    "### Model Building "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "x6viTKPwIINj"
   },
   "outputs": [],
   "source": [
    "# Import all libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tqdm import tqdm\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.layers import Conv1D, MaxPooling1D,Layer,Dense, Input, LSTM, Embedding, Dropout, Activation, Flatten, Bidirectional, GlobalMaxPool1D, Add, RepeatVector, TimeDistributed,concatenate\n",
    "from tensorflow.keras.models import Model, Sequential\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
    "import keras.backend as K\n",
    "from tensorflow.keras.optimizers import Adam \n",
    "from tensorflow.keras import regularizers\n",
    "#from tensorflow.compact.v1.keras.layers import Attention"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "LAZDn3XpIbxA",
    "outputId": "80fbc1ff-bd5a-4d8b-8620-dd6241818e3f"
   },
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ONr3hvqNIINo"
   },
   "outputs": [],
   "source": [
    "df = pd.read_excel('D5(InputData)_processed_trimmed_data.xlsx',sheet_name='Sheet1',encoding=\"utf-8\",dtype=\"str\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "AOQ8hatjIINq"
   },
   "outputs": [],
   "source": [
    "maxlen_s = 20\n",
    "maxlen_l = 40\n",
    "embedding_size = 200\n",
    "numword1 = 6000\n",
    "numword2 = 8000\n",
    "numword3 = 13000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EJSapq5dIINs"
   },
   "outputs": [],
   "source": [
    "def prepare_token(data,numword):\n",
    "  t = Tokenizer(num_words=numword)\n",
    "  t.fit_on_texts(data)\n",
    "  print(\"Tokenization process...F1.2..\", len(t.word_index)) \n",
    "  return (t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "nXb-1tM7aFc3"
   },
   "outputs": [],
   "source": [
    "class attention(Layer):\n",
    "    def __init__(self,**kwargs):\n",
    "        super(attention,self).__init__(**kwargs)\n",
    "\n",
    "    def build(self,input_shape):\n",
    "        self.W=self.add_weight(name=\"att_weight\",shape=(input_shape[-1],1),initializer=\"normal\")\n",
    "        self.b=self.add_weight(name=\"att_bias\",shape=(input_shape[1],1),initializer=\"zeros\")        \n",
    "        super(attention, self).build(input_shape)\n",
    "\n",
    "    def call(self,x):\n",
    "        et=K.squeeze(K.tanh(K.dot(x,self.W)+self.b),axis=-1)\n",
    "        at=K.softmax(et)\n",
    "        at=K.expand_dims(at,axis=-1)\n",
    "        output=x*at\n",
    "        return K.sum(output,axis=1)\n",
    "\n",
    "    def compute_output_shape(self,input_shape):\n",
    "        return (input_shape[0],input_shape[-1])\n",
    "\n",
    "    def get_config(self):\n",
    "        return super(attention,self).get_config()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Glv_model(data,t):\n",
    "  #print(\"Preparing GloVe vector...F1.3 .. token as input\", len(t.word_index))\n",
    "  embeddings = {}  \n",
    "  if len(embeddings)==0:\n",
    "    EMBEDDING_FILE = 'glove.6B.200d.txt'\n",
    "    embeddings = dict()\n",
    "    f = open(EMBEDDING_FILE,encoding='Latin-1')\n",
    "    for line in (f):\n",
    "        values = line.split()\n",
    "        word = values[0]\n",
    "        coefs = np.asarray(values[1:])\n",
    "        embeddings[word] = coefs\n",
    "    f.close()\n",
    "  print(\"Glove being used:\",len(embeddings))\n",
    "  \n",
    "  word_index = t.word_index\n",
    "  print(\"t.word_index shape\", len(t.word_index))  \n",
    "  embedding_matrix = np.zeros((t.num_words, embedding_size))\n",
    "  #print(\"Embedding Matrix Shape : \", embedding_matrix.shape )\n",
    "  for word, i in tqdm(word_index.items()):\n",
    "    if i < t.num_words:\n",
    "        embedding_vector = embeddings.get(word)\n",
    "        if embedding_vector is not None: \n",
    "            embedding_matrix[i] = embedding_vector\n",
    "            #if i < 2 : print(i,embedding_matrix[i])\n",
    "  return(embedding_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 152
    },
    "colab_type": "code",
    "id": "VxoReVmtWtmE",
    "outputId": "9ddc46d2-c624-4ea1-9a1d-b59ea353291e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tokenization process...F1.2.. 13923\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  9%|▉         | 1293/13923 [00:00<00:01, 11267.40it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Glove being used: 399955\n",
      "t.word_index shape 13923\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13923/13923 [00:00<00:00, 24841.02it/s]\n"
     ]
    }
   ],
   "source": [
    "#Tokenization and Embedding Process\n",
    "\n",
    "#t1 = prepare_token(df[\"trimmed_words_short\"],numword1)\n",
    "#t2 = prepare_token(df[\"trimmed_words_long\"],numword2)\n",
    "t3 = prepare_token(df[\"trimmed_words_short\"]+\" \"+df[\"trimmed_words_long\"],numword3)\n",
    "\n",
    "#embedding_matrix1 = Glv_model(df[\"trimmed_words_short\"],t1)\n",
    "#embedding_matrix2 = Glv_model(df[\"trimmed_words_long\"],t2)\n",
    "embedding_matrix3 = Glv_model(df[\"trimmed_words_short\"]+\" \"+df[\"trimmed_words_long\"],t3)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8373"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[\"trimmed_words_short\"]+\" \"+df[\"trimmed_words_long\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13000\n",
      "13923\n"
     ]
    }
   ],
   "source": [
    "#print(t1.num_words)\n",
    "#print(len(t1.word_counts))\n",
    "#print(t2.num_words)\n",
    "#print(len(t2.word_counts))\n",
    "print(t3.num_words)\n",
    "print(len(t3.word_counts))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 85
    },
    "colab_type": "code",
    "id": "TNplXyXlhW09",
    "outputId": "b3c8fe79-0607-4dbb-a606-52e15dfe781e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train_s Shape :  (5861, 20)\n",
      "X_train_l Shape :  (5861, 40)\n",
      "y_train Shape :  (5861, 74)\n",
      "Group counts :  74 10 18 36\n"
     ]
    }
   ],
   "source": [
    "## Data Preparation\n",
    "X_short_t = t3.texts_to_sequences(df[\"trimmed_words_short\"])\n",
    "X_long_t = t3.texts_to_sequences(df[\"trimmed_words_long\"])\n",
    "X_short = pad_sequences(X_short_t, maxlen=maxlen_s, padding = 'post', truncating = 'post')\n",
    "X_long = pad_sequences(X_long_t, maxlen=maxlen_l, padding = 'post', truncating = 'post')\n",
    "\n",
    "onehot_encoder = OneHotEncoder(sparse=False)\n",
    "#values = np.array(values).reshape(len(values),1)\n",
    "y = onehot_encoder.fit_transform(np.array(df[\"Assignment group\"]).reshape(len(df[\"Assignment group\"]),1))\n",
    "y_75 = onehot_encoder.fit_transform(np.array(df[\"new_group_75\"]).reshape(len(df[\"new_group_75\"]),1))\n",
    "y_85 = onehot_encoder.fit_transform(np.array(df[\"new_group_85\"]).reshape(len(df[\"new_group_85\"]),1))\n",
    "y_95 = onehot_encoder.fit_transform(np.array(df[\"new_group_95\"]).reshape(len(df[\"new_group_95\"]),1))\n",
    "\n",
    "Groups = len(df[\"Assignment group\"].value_counts())\n",
    "Groups_75 = len(df[\"new_group_75\"].value_counts())\n",
    "Groups_85 = len(df[\"new_group_85\"].value_counts())\n",
    "Groups_95 = len(df[\"new_group_95\"].value_counts())\n",
    "\n",
    "# Split features into training and validation sets\n",
    "X_train_s, X_val_s, X_train_l,  X_val_l, y_train, y_val,y_train_75,y_val_75,y_train_85,y_val_85,y_train_95,y_val_95 = train_test_split(X_short,X_long,y,y_75,y_85,y_95, test_size=0.30, random_state=15)\n",
    "\n",
    "print(\"X_train_s Shape : \",X_train_s.shape)\n",
    "print(\"X_train_l Shape : \",X_train_l.shape)\n",
    "print(\"y_train Shape : \",y_train.shape)\n",
    "print(\"Group counts : \",Groups,Groups_75,Groups_85,Groups_95)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 9, 20, 16, 46,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "         0,  0,  0]),\n",
       " array([  48,    9,   20,   16,   46,  477,  183,   49,   35,  768,   65,\n",
       "         165,   39,   66,  291,   22,  989,   19,  404,  990,  220,  584,\n",
       "         508, 1662,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n",
       "           0,    0,    0,    0,    0,    0,    0]),\n",
       " 'unable login company vpn')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_short[16],X_long[16],df[\"trimmed_words_short\"][16]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GRP_0       3954\n",
       "GRP_9999    1174\n",
       "GRP_8        661\n",
       "GRP_24       289\n",
       "GRP_12       257\n",
       "GRP_9        252\n",
       "GRP_2        241\n",
       "GRP_19       213\n",
       "GRP_3        200\n",
       "GRP_6        184\n",
       "GRP_13       144\n",
       "GRP_10       139\n",
       "GRP_5        129\n",
       "GRP_14       118\n",
       "GRP_25       116\n",
       "GRP_33       106\n",
       "GRP_4        100\n",
       "GRP_29        96\n",
       "Name: new_group_85, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"new_group_85\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 626
    },
    "colab_type": "code",
    "id": "TSr3Zn2T1dlq",
    "outputId": "194c1ba2-488c-4129-f029-ac93a1f352d4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensor(\"1.0_Input_Layer_1:0\", shape=(None, 20), dtype=int32)\n",
      "WARNING:tensorflow:<tensorflow.python.keras.layers.recurrent.UnifiedLSTM object at 0x0000024DC559E7C8>: Note that this layer is not optimized for performance. Please use tf.keras.layers.CuDNNLSTM for better performance on GPU.\n",
      "WARNING:tensorflow:<tensorflow.python.keras.layers.recurrent.UnifiedLSTM object at 0x0000024DC55B5708>: Note that this layer is not optimized for performance. Please use tf.keras.layers.CuDNNLSTM for better performance on GPU.\n",
      "WARNING:tensorflow:<tensorflow.python.keras.layers.recurrent.UnifiedLSTM object at 0x0000024EBE893E48>: Note that this layer is not optimized for performance. Please use tf.keras.layers.CuDNNLSTM for better performance on GPU.\n",
      "WARNING:tensorflow:<tensorflow.python.keras.layers.recurrent.UnifiedLSTM object at 0x0000024EBE910D08>: Note that this layer is not optimized for performance. Please use tf.keras.layers.CuDNNLSTM for better performance on GPU.\n",
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "1.0_Input_Layer (InputLayer)    [(None, 20)]         0                                            \n",
      "__________________________________________________________________________________________________\n",
      "2.0_Input_Layer (InputLayer)    [(None, 40)]         0                                            \n",
      "__________________________________________________________________________________________________\n",
      "1.1_Embedding (Embedding)       (None, 20, 200)      2600000     1.0_Input_Layer[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "2.1_Embedding (Embedding)       (None, 40, 200)      2600000     2.0_Input_Layer[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "1.2_Bidirectional (Bidirectiona (None, 20, 508)      924560      1.1_Embedding[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "2.2_Bidirectional (Bidirectiona (None, 40, 508)      924560      2.1_Embedding[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "1.3_TimeDense (TimeDistributed) (None, 20, 200)      101800      1.2_Bidirectional[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "2.3_Dense (Dense)               (None, 40, 50)       25450       2.2_Bidirectional[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "dropout_3 (Dropout)             (None, 20, 200)      0           1.3_TimeDense[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "dropout_4 (Dropout)             (None, 40, 50)       0           2.3_Dense[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "1.5_Flatten (Flatten)           (None, 4000)         0           dropout_3[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "2.4_Flatten (Flatten)           (None, 2000)         0           dropout_4[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "3.1_concatenate_heading (Concat (None, 6000)         0           1.5_Flatten[0][0]                \n",
      "                                                                 2.4_Flatten[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "dropout_5 (Dropout)             (None, 6000)         0           3.1_concatenate_heading[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "3.2_Dense (Dense)               (None, 100)          600100      dropout_5[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "3.3_Dense (Dense)               (None, 18)           1818        3.2_Dense[0][0]                  \n",
      "==================================================================================================\n",
      "Total params: 7,778,288\n",
      "Trainable params: 2,578,288\n",
      "Non-trainable params: 5,200,000\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "## Build the Model\n",
    "\n",
    "# Model with Short description..............\n",
    "short_desc_input = Input(shape=(maxlen_s,), dtype='int32',name = \"1.0_Input_Layer\")\n",
    "print(short_desc_input)\n",
    "embedded_sequences = Embedding(t3.num_words, embedding_size,weights = [embedding_matrix3], trainable = False, name='1.1_Embedding')(short_desc_input)\n",
    "short_lstm = Bidirectional(LSTM(254, return_sequences=True, dropout=0.1),name = \"1.2_Bidirectional\")(embedded_sequences)\n",
    "#attn = attention()(short_lstm)\n",
    "short_dense = TimeDistributed(Dense(200),name = \"1.3_TimeDense\")(short_lstm)\n",
    "#attn = attention(name = \"1.4_attention\")(short_dense)\n",
    "dropout1 = Dropout(0.2)(short_dense)\n",
    "short_flatten = Flatten(name=\"1.5_Flatten\")(dropout1)\n",
    "\n",
    "# Model with Long description..............\n",
    "long_input = Input(shape=(maxlen_l,), dtype='int32',name = \"2.0_Input_Layer\")\n",
    "long_embedded_sequences = Embedding(t3.num_words, embedding_size,weights = [embedding_matrix3], trainable = False, name='2.1_Embedding')(long_input)\n",
    "long_lstm = Bidirectional(LSTM(254, return_sequences=True, dropout = 0.1),name = \"2.2_Bidirectional\")(long_embedded_sequences)\n",
    "long_dense = Dense(50, activation='relu',name = \"2.3_Dense\",\n",
    "                   kernel_regularizer=regularizers.l1_l2(l1=0.001, l2=0.001))(long_lstm)\n",
    "dropout2 = Dropout(0.2)(long_dense)\n",
    "long_flatten = Flatten(name = \"2.4_Flatten\")(dropout2)\n",
    "\n",
    "#Concate both the end Layers ....................\n",
    "description_output = concatenate([short_flatten, long_flatten], name='3.1_concatenate_heading')\n",
    "dropout3 = Dropout(0.1)(description_output)\n",
    "description_vector = Dense(100, activation='relu',name = \"3.2_Dense\",\n",
    "                          kernel_regularizer=regularizers.l1_l2(l1=0.001, l2=0.001))(dropout3)\n",
    "preds = Dense(18, activation='softmax',name = \"3.3_Dense\")(description_vector)\n",
    "\n",
    "#Final model and compiling.................\n",
    "model = Model([short_desc_input, long_input], [preds])\n",
    "model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, decay=0.001), metrics=['accuracy', 'mse'])\n",
    "#model.compile(loss='categorical_crossentropy',optimizer='rmsprop',metrics=['acc'])\n",
    "model.summary()  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 865
    },
    "colab_type": "code",
    "id": "T8DSZr4iZLR3",
    "outputId": "2e007391-eecb-44bf-ac15-6021a8831e3f",
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 6698 samples, validate on 1675 samples\n",
      "Epoch 1/200\n",
      "6698/6698 [==============================] - 5s 799us/sample - loss: 5.1632 - accuracy: 0.4851 - mse: 0.0398 - val_loss: 2.4894 - val_accuracy: 0.4896 - val_mse: 0.0366\n",
      "Epoch 2/200\n",
      "6698/6698 [==============================] - 4s 568us/sample - loss: 2.0133 - accuracy: 0.5434 - mse: 0.0340 - val_loss: 1.9406 - val_accuracy: 0.5015 - val_mse: 0.0351\n",
      "Epoch 3/200\n",
      "6698/6698 [==============================] - 4s 568us/sample - loss: 1.7661 - accuracy: 0.5530 - mse: 0.0332 - val_loss: 1.8621 - val_accuracy: 0.5104 - val_mse: 0.0349\n",
      "Epoch 4/200\n",
      "6698/6698 [==============================] - 4s 570us/sample - loss: 1.6820 - accuracy: 0.5633 - mse: 0.0325 - val_loss: 1.7943 - val_accuracy: 0.5266 - val_mse: 0.0340\n",
      "Epoch 5/200\n",
      "6698/6698 [==============================] - 4s 569us/sample - loss: 1.6415 - accuracy: 0.5663 - mse: 0.0320 - val_loss: 1.7075 - val_accuracy: 0.5337 - val_mse: 0.0332\n",
      "Epoch 6/200\n",
      "6698/6698 [==============================] - 4s 570us/sample - loss: 1.5972 - accuracy: 0.5772 - mse: 0.0313 - val_loss: 1.7115 - val_accuracy: 0.5540 - val_mse: 0.0334\n",
      "Epoch 7/200\n",
      "6698/6698 [==============================] - 4s 572us/sample - loss: 1.5743 - accuracy: 0.5833 - mse: 0.0307 - val_loss: 1.8062 - val_accuracy: 0.5409 - val_mse: 0.0338\n",
      "Epoch 8/200\n",
      "6698/6698 [==============================] - 4s 571us/sample - loss: 1.5623 - accuracy: 0.5911 - mse: 0.0303 - val_loss: 1.7997 - val_accuracy: 0.5451 - val_mse: 0.0340\n",
      "Epoch 9/200\n",
      "6698/6698 [==============================] - 4s 568us/sample - loss: 1.5328 - accuracy: 0.5976 - mse: 0.0300 - val_loss: 1.6344 - val_accuracy: 0.5636 - val_mse: 0.0319\n",
      "Epoch 10/200\n",
      "6698/6698 [==============================] - 4s 570us/sample - loss: 1.4955 - accuracy: 0.6045 - mse: 0.0296 - val_loss: 1.6095 - val_accuracy: 0.5636 - val_mse: 0.0317\n",
      "Epoch 11/200\n",
      "6698/6698 [==============================] - 4s 572us/sample - loss: 1.4620 - accuracy: 0.6069 - mse: 0.0291 - val_loss: 1.6193 - val_accuracy: 0.5654 - val_mse: 0.0317\n",
      "Epoch 12/200\n",
      "6698/6698 [==============================] - 4s 572us/sample - loss: 1.4751 - accuracy: 0.6044 - mse: 0.0293 - val_loss: 1.6038 - val_accuracy: 0.5707 - val_mse: 0.0317\n",
      "Epoch 13/200\n",
      "6698/6698 [==============================] - 4s 577us/sample - loss: 1.4629 - accuracy: 0.6108 - mse: 0.0292 - val_loss: 1.6140 - val_accuracy: 0.5624 - val_mse: 0.0319\n",
      "Epoch 14/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.4432 - accuracy: 0.6073 - mse: 0.0289 - val_loss: 1.5817 - val_accuracy: 0.5618 - val_mse: 0.0317\n",
      "Epoch 15/200\n",
      "6698/6698 [==============================] - 4s 578us/sample - loss: 1.4485 - accuracy: 0.6153 - mse: 0.0290 - val_loss: 1.5779 - val_accuracy: 0.5648 - val_mse: 0.0315\n",
      "Epoch 16/200\n",
      "6698/6698 [==============================] - 4s 576us/sample - loss: 1.4324 - accuracy: 0.6112 - mse: 0.0288 - val_loss: 1.5879 - val_accuracy: 0.5654 - val_mse: 0.0316\n",
      "Epoch 17/200\n",
      "6698/6698 [==============================] - 4s 573us/sample - loss: 1.4737 - accuracy: 0.6072 - mse: 0.0294 - val_loss: 1.6109 - val_accuracy: 0.5582 - val_mse: 0.0320\n",
      "Epoch 18/200\n",
      "6698/6698 [==============================] - 4s 586us/sample - loss: 1.3855 - accuracy: 0.6188 - mse: 0.0285 - val_loss: 1.5493 - val_accuracy: 0.5624 - val_mse: 0.0318\n",
      "Epoch 19/200\n",
      "6698/6698 [==============================] - 4s 583us/sample - loss: 1.3631 - accuracy: 0.6169 - mse: 0.0283 - val_loss: 1.5246 - val_accuracy: 0.5678 - val_mse: 0.0314\n",
      "Epoch 20/200\n",
      "6698/6698 [==============================] - 4s 580us/sample - loss: 1.3564 - accuracy: 0.6203 - mse: 0.0281 - val_loss: 1.5278 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 21/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.3511 - accuracy: 0.6205 - mse: 0.0281 - val_loss: 1.5290 - val_accuracy: 0.5648 - val_mse: 0.0315\n",
      "Epoch 22/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.3577 - accuracy: 0.6162 - mse: 0.0282 - val_loss: 1.5310 - val_accuracy: 0.5654 - val_mse: 0.0315\n",
      "Epoch 23/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.3423 - accuracy: 0.6218 - mse: 0.0282 - val_loss: 1.5211 - val_accuracy: 0.5636 - val_mse: 0.0315\n",
      "Epoch 24/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.3356 - accuracy: 0.6227 - mse: 0.0280 - val_loss: 1.5209 - val_accuracy: 0.5642 - val_mse: 0.0315\n",
      "Epoch 25/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.3383 - accuracy: 0.6194 - mse: 0.0281 - val_loss: 1.5234 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 26/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.3384 - accuracy: 0.6194 - mse: 0.0281 - val_loss: 1.5199 - val_accuracy: 0.5648 - val_mse: 0.0315\n",
      "Epoch 27/200\n",
      "6698/6698 [==============================] - 4s 572us/sample - loss: 1.3347 - accuracy: 0.6176 - mse: 0.0281 - val_loss: 1.5208 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 28/200\n",
      "6698/6698 [==============================] - 4s 574us/sample - loss: 1.3344 - accuracy: 0.6176 - mse: 0.0281 - val_loss: 1.5200 - val_accuracy: 0.5666 - val_mse: 0.0315\n",
      "Epoch 29/200\n",
      "6698/6698 [==============================] - 4s 573us/sample - loss: 1.3301 - accuracy: 0.6223 - mse: 0.0280 - val_loss: 1.5191 - val_accuracy: 0.5654 - val_mse: 0.0315\n",
      "Epoch 30/200\n",
      "6698/6698 [==============================] - 4s 579us/sample - loss: 1.3268 - accuracy: 0.6226 - mse: 0.0279 - val_loss: 1.5192 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 31/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.3325 - accuracy: 0.6185 - mse: 0.0281 - val_loss: 1.5187 - val_accuracy: 0.5666 - val_mse: 0.0315\n",
      "Epoch 32/200\n",
      "6698/6698 [==============================] - 4s 577us/sample - loss: 1.3347 - accuracy: 0.6218 - mse: 0.0281 - val_loss: 1.5190 - val_accuracy: 0.5666 - val_mse: 0.0315\n",
      "Epoch 33/200\n",
      "6698/6698 [==============================] - 4s 577us/sample - loss: 1.3320 - accuracy: 0.6203 - mse: 0.0281 - val_loss: 1.5185 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 34/200\n",
      "6698/6698 [==============================] - 4s 575us/sample - loss: 1.3234 - accuracy: 0.6221 - mse: 0.0279 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 35/200\n",
      "6698/6698 [==============================] - 4s 577us/sample - loss: 1.3294 - accuracy: 0.6200 - mse: 0.0279 - val_loss: 1.5183 - val_accuracy: 0.5666 - val_mse: 0.0315\n",
      "Epoch 36/200\n",
      "6698/6698 [==============================] - 4s 581us/sample - loss: 1.3328 - accuracy: 0.6175 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5666 - val_mse: 0.0315\n",
      "Epoch 37/200\n",
      "6698/6698 [==============================] - 4s 578us/sample - loss: 1.3339 - accuracy: 0.6223 - mse: 0.0281 - val_loss: 1.5185 - val_accuracy: 0.5654 - val_mse: 0.0315\n",
      "Epoch 38/200\n",
      "6698/6698 [==============================] - 4s 576us/sample - loss: 1.3342 - accuracy: 0.6196 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 39/200\n",
      "6698/6698 [==============================] - 4s 578us/sample - loss: 1.3303 - accuracy: 0.6206 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 40/200\n",
      "6698/6698 [==============================] - 4s 582us/sample - loss: 1.3296 - accuracy: 0.6218 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 41/200\n",
      "6698/6698 [==============================] - 4s 580us/sample - loss: 1.3296 - accuracy: 0.6230 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 42/200\n",
      "6698/6698 [==============================] - 4s 578us/sample - loss: 1.3262 - accuracy: 0.6247 - mse: 0.0279 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 43/200\n",
      "6698/6698 [==============================] - 4s 589us/sample - loss: 1.3341 - accuracy: 0.6211 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 44/200\n",
      "6698/6698 [==============================] - 4s 590us/sample - loss: 1.3256 - accuracy: 0.6223 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 45/200\n",
      "6698/6698 [==============================] - 4s 586us/sample - loss: 1.3254 - accuracy: 0.6208 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 46/200\n",
      "6698/6698 [==============================] - 4s 590us/sample - loss: 1.3285 - accuracy: 0.6184 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 47/200\n",
      "6698/6698 [==============================] - 4s 583us/sample - loss: 1.3340 - accuracy: 0.6212 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 48/200\n",
      "6698/6698 [==============================] - 4s 583us/sample - loss: 1.3328 - accuracy: 0.6182 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 49/200\n",
      "6698/6698 [==============================] - 4s 585us/sample - loss: 1.3266 - accuracy: 0.6196 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 50/200\n",
      "6698/6698 [==============================] - 4s 584us/sample - loss: 1.3258 - accuracy: 0.6182 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 51/200\n",
      "6698/6698 [==============================] - 4s 583us/sample - loss: 1.3290 - accuracy: 0.6208 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 52/200\n",
      "6698/6698 [==============================] - 4s 583us/sample - loss: 1.3252 - accuracy: 0.6205 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 53/200\n",
      "6698/6698 [==============================] - 4s 585us/sample - loss: 1.3280 - accuracy: 0.6223 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 54/200\n",
      "6698/6698 [==============================] - 4s 584us/sample - loss: 1.3302 - accuracy: 0.6224 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 55/200\n",
      "6698/6698 [==============================] - 4s 584us/sample - loss: 1.3316 - accuracy: 0.6200 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 56/200\n",
      "6698/6698 [==============================] - 4s 584us/sample - loss: 1.3330 - accuracy: 0.6221 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 57/200\n",
      "6698/6698 [==============================] - 4s 588us/sample - loss: 1.3285 - accuracy: 0.6220 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 58/200\n",
      "6698/6698 [==============================] - 4s 584us/sample - loss: 1.3301 - accuracy: 0.6245 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 59/200\n",
      "6698/6698 [==============================] - 4s 584us/sample - loss: 1.3321 - accuracy: 0.6208 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 60/200\n",
      "6698/6698 [==============================] - 4s 585us/sample - loss: 1.3284 - accuracy: 0.6203 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 61/200\n",
      "6698/6698 [==============================] - 4s 586us/sample - loss: 1.3295 - accuracy: 0.6232 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 62/200\n",
      "6698/6698 [==============================] - 4s 584us/sample - loss: 1.3241 - accuracy: 0.6224 - mse: 0.0279 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 63/200\n",
      "6698/6698 [==============================] - 4s 585us/sample - loss: 1.3361 - accuracy: 0.6197 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 64/200\n",
      "6698/6698 [==============================] - 4s 584us/sample - loss: 1.3294 - accuracy: 0.6217 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 65/200\n",
      "6698/6698 [==============================] - 4s 589us/sample - loss: 1.3325 - accuracy: 0.6197 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 66/200\n",
      "6698/6698 [==============================] - 4s 585us/sample - loss: 1.3315 - accuracy: 0.6197 - mse: 0.0281 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n",
      "Epoch 67/200\n",
      "6698/6698 [==============================] - 4s 585us/sample - loss: 1.3301 - accuracy: 0.6218 - mse: 0.0280 - val_loss: 1.5184 - val_accuracy: 0.5660 - val_mse: 0.0315\n"
     ]
    }
   ],
   "source": [
    "# Run the model....\n",
    "reduce_lr = (ReduceLROnPlateau(monitor='val_accuracy', factor=0.2,\n",
    "                              patience=5, min_lr=0.00000001))\n",
    "early_stop = (EarlyStopping(monitor='val_accuracy', patience= 55))\n",
    "\n",
    "history = model.fit([X_short,X_long], [y_85], \n",
    "                    validation_split=0.2, \n",
    "                    epochs=200, batch_size=100,callbacks= ([reduce_lr,early_stop]), verbose = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 100,\n",
       " 'epochs': 200,\n",
       " 'steps': None,\n",
       " 'samples': 6698,\n",
       " 'verbose': 0,\n",
       " 'do_validation': True,\n",
       " 'metrics': ['loss', 'accuracy', 'mse', 'val_loss', 'val_accuracy', 'val_mse']}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "x_wu8MN1IIN1"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (15, 6))\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.plot(history.history['accuracy'], label='Train Acc')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation Acc')\n",
    "#print(\"\\n Data set : \"+D+\" & \"+T+\";  No of Output Groups: \"+str(Groups)+\" ; GloVe vector used : \"+glv+\"; Attention :\"+attention1)\n",
    "plt.title(\"Accuracy\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.plot(history.history['loss'], label='Train loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation loss')\n",
    "plt.title(\"Loss\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "\n",
    "plt.subplot(1, 3, 3)\n",
    "plt.plot(history.history['lr'], label='Learninig Rate')\n",
    "plt.title(\"Learning Rate\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 79
    },
    "colab_type": "code",
    "id": "vWKu3e4lIIN5",
    "outputId": "730165a2-05ba-40cb-d506-6c92298d78c2",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Description Col</th>\n",
       "      <th>Group Col</th>\n",
       "      <th>Dense Group</th>\n",
       "      <th>Training Acc</th>\n",
       "      <th>Validation Acc</th>\n",
       "      <th>Training Loss</th>\n",
       "      <th>Validation Loss</th>\n",
       "      <th>glove vector used</th>\n",
       "      <th>no of Epochs run</th>\n",
       "      <th>attention</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trimmed_words_short</td>\n",
       "      <td>new_group_75</td>\n",
       "      <td>10</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.68</td>\n",
       "      <td>1.48</td>\n",
       "      <td>1.33</td>\n",
       "      <td>yes</td>\n",
       "      <td>22</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Description Col     Group Col  ...  no of Epochs run  attention\n",
       "0  trimmed_words_short  new_group_75  ...                22         no\n",
       "\n",
       "[1 rows x 10 columns]"
      ]
     },
     "execution_count": 88,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Results =[]\n",
    "Results = pd.DataFrame(\n",
    "    { 'Description Col':Desc_Col,\n",
    "      'Group Col':Group_Col,\n",
    "      'Dense Group':Dense_group,\n",
    "      'Training Acc':Train_Acc,\n",
    "      'Validation Acc':Valid_Acc,\n",
    "      'Training Loss':Train_Loss,\n",
    "      'Validation Loss':Valid_Loss,\n",
    "      'glove vector used' : glove_vec,\n",
    "      'no of Epochs run' : epo_run,\n",
    "      'attention' : attn_v\n",
    "     })\n",
    "Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "QjmRY5bnIIN7"
   },
   "outputs": [],
   "source": [
    "Results.to_excel(\"results.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "ICmDC3Sr-GK6",
    "outputId": "2fc2b752-de5d-46a3-f982-8166dfbb95a5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    trimmed_words_short\n",
       "Name: Description Col, dtype: object"
      ]
     },
     "execution_count": 57,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Results[\"Description Col\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "73uONRFOvpyP"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Capstone_Project_Model_Build_V8.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
